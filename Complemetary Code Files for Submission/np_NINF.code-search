# Query: np.NINF
# ContextLines: 1

29 results - 2 files

Complemetary Code Files for Submission\conditionalAssetPricingLogMarginalLikelihoodTauClass.py:
   114                                                                   factorsInModel=None, predictorsInModel=None, keyPrintResults=True):
   115:     MarginalLikelihood = np.exp(logMarginalLikelihood - max(logMarginalLikelihood)) # [np.argwhere(logMarginalLikelihood != -np.inf)]))
   116  

   266      # Variables initialization.
   267:     logMarginalLikelihood  = np.zeros((nModelsMax,), dtype=float); logMarginalLikelihood.fill(-np.inf)
   268      # Placeholder for the restricted models.
   269:     logMarginalLikelihoodR = np.zeros((nModelsMax,), dtype=float); logMarginalLikelihoodR.fill(-np.inf)
   270  

   313          if not (1-1 in factorsIndicesIncludedInModel) and len(factorsIndicesIncludedInModel) != 0:
   314:             #logMarginalLikelihood[model] = -np.inf
   315              continue

   332  
   333:                 # logMarginalLikelihood[model] = -np.inf
   334  

   342  
   343:                 # logMarginalLikelihood[model] = -np.inf
   344  

   363          if N == 0:
   364:             #logMarginalLikelihood[model] = -np.inf
   365              continue

   514              print(predictorsIndicesIncludedInModel)
   515:             # logMarginalLikelihoodR[model] = -np.inf
   516              string = 'Trying normal inverse ... '

   562      print('All combinations= %d Total number of legit models= %d 2ND count %d '             \
   563:           %(nModelsMax, np.count_nonzero(logMarginalLikelihood != -np.inf), nLegitModels))
   564  

   752          print('All combinations= %d Total number of legit models= %d 2ND count %d ' \
   753:               % (pow(2, self.MMax + self.KMax), np.count_nonzero(logMarginalLikelihood != -np.inf), nLegitModels))
   754  

  1657      logMarginalLikelihood = np.zeros((nModelsMax,), dtype=np.float64)
  1658:     logMarginalLikelihood.fill(-np.inf)
  1659      # Placeholder for the restricted models.
  1660      logMarginalLikelihoodR = np.zeros((nModelsMax,), dtype=np.float64)
  1661:     logMarginalLikelihoodR.fill(-np.inf)
  1662  

  1704          if not (1 - 1 in factorsIndicesIncludedInModel) and len(factorsIndicesIncludedInModel) != 0:
  1705:             # logMarginalLikelihood[model] = -np.inf
  1706              continue

  1722                      (9 - 1 in predictorsIndicesIncludedInModel and 11 - 1 in predictorsIndicesIncludedInModel):
  1723:                 # logMarginalLikelihood[model] = -np.inf
  1724  

  1732  
  1733:                 # logMarginalLikelihood[model] = -np.inf
  1734  

  1753          if N == 0:
  1754:             # logMarginalLikelihood[model] = -np.inf
  1755              continue

  1908              print(predictorsIndicesIncludedInModel)
  1909:             # logMarginalLikelihoodR[model] = -np.inf
  1910              string = 'Trying normal inverse ... '

  1958      print('All combinations= %d Total number of legit models= %d 2ND count %d ' \
  1959:           % (nModelsMax, np.count_nonzero(logMarginalLikelihood != -np.inf), nLegitModels))
  1960  

  1991      logMarginalLikelihood = np.zeros((nModelsMax,), dtype=np.float64)
  1992:     logMarginalLikelihood.fill(-np.inf)
  1993      # Placeholder for the restricted models.
  1994      logMarginalLikelihoodR = np.zeros((nModelsMax,), dtype=np.float64)
  1995:     logMarginalLikelihoodR.fill(-np.inf)
  1996  

  2027          if not (1 - 1 in factorsIndicesIncludedInModel) and len(factorsIndicesIncludedInModel) != 0:
  2028:     #         # logMarginalLikelihood[model] = -np.inf
  2029              continue

  2228      #         print(predictorsIndicesIncludedInModel)
  2229:     #         # logMarginalLikelihoodR[model] = -np.inf
  2230      #         string = 'Trying normal inverse ... '

  2657          if not (1 - 1 in factorsIndicesIncludedInModel) and len(factorsIndicesIncludedInModel) != 0:
  2658:     #         # logMarginalLikelihood[model] = -np.inf
  2659              continue

  2832      #         print(predictorsIndicesIncludedInModel)
  2833:     #         # logMarginalLikelihoodR[model] = -np.inf
  2834      #         string = 'Trying normal inverse ... '

  3057          if not (1 - 1 in factorsIndicesIncludedInModel) and len(factorsIndicesIncludedInModel) != 0:
  3058:     #         # logMarginalLikelihood[model] = -np.inf
  3059              continue

  4888          predictorsProbabilityMat = np.full([len(directories_indecies) , len(predictorsNames)], fill_value = np.nan, dtype = float)
  4889:         CLMLMax = -np.inf
  4890  

Complemetary Code Files for Submission\predictiveRegressionLogMarginalLikelihood.py:
   65      # T0perPredictor = 10;                                                       # number of data entries per parameter.
   66:     logMarginalLikelihood = np.zeros((nModelsMax,), dtype=float); logMarginalLikelihood.fill(-np.inf)
   67  

   96  
   97:             logMarginalLikelihood[model] = -np.inf
   98  

  192      print('All combinations= %i Total number of legit models= %i %i T0 Average= %f T0 Max= %f T0 Min= %f' % \
  193:         (nModelsMax, np.count_nonzero(logMarginalLikelihood != -np.inf), nLegitModels , T0Total / nLegitModels, T0Max, T0Min))
  194  
